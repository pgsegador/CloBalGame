% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_psi_allocation.R
\name{get_psi_allocation}
\alias{get_psi_allocation}
\title{Compute the optimal imputation minimizing a generalized dissimilarity}
\usage{
get_psi_allocation(v, gamma = rep(1, length(v)), beta = rep(0, length(v)))
}
\arguments{
\item{v}{Numeric vector of length \eqn{(2^n-1)}, the game values (\eqn{\gamma_S}) for all nonâ€‘empty coalitions.}

\item{gamma}{Numeric weight vector of the same length as \code{v}, (\eqn{\gamma_S}) in the objective.}

\item{beta}{Numeric bias vector of the same length as \code{v}, (\eqn{\beta_S}) in the objective. Defaults to zero.}
}
\value{
Numeric vector \eqn{x^* \in \mathbb{R}^n}, the optimal imputation minimizing the given objective.
}
\description{
Solves the quadratic program
\deqn{
\min_{x \in \mathbb{R}^n}
  \sum_{S \subseteq N} \gamma_S \left(v(S) - \sum_{i \in S} x_i\right)^2
  + \sum_{S \subseteq N} \beta_S \left(v(S) - \sum_{i \in S} x_i\right)
}
Note that the solution for \eqn{\gamma_S} equal to the Shapley weights and \eqn{\beta_S = 0}
recovers the Shapley value.
}
\examples{
v      <- c(0, 0.8, 0.8, 0, 0.8, 0, 1)
n      <- log2(length(v) + 1)
gamma  <- get_shapley_gamma(n, last_val = v[length(v)])
beta   <- rep(0, length(v))
psi    <- get_psi_allocation(v, gamma = gamma, beta = beta)
shap   <- CoopGame::shapleyValue(v)

}
