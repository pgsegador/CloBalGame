% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/closest_balanced_game_iter.R
\name{closest_balanced_game_iter}
\alias{closest_balanced_game_iter}
\title{Iteratively Compute the Closest Balanced Imputation with Probabilistic Reseeding}
\usage{
closest_balanced_game_iter(
  v,
  gamma = rep(1, length(v)),
  vN = v[length(v)],
  positive_game = FALSE,
  tol = 1e-22,
  max_iter_seed = 2 * as.integer(log2(length(v) + 1)),
  prob_seed = 0.8,
  epsilon = 1e-08
)
}
\arguments{
\item{v}{Numeric vector of length \eqn{2^n - 1}, game values for each non-empty coalition.}

\item{gamma}{Numeric vector of same length as \code{v}, weights for each coalition.}

\item{vN}{Optional numeric value to fix \eqn{v^*(N)} in the optimization. By default, this value is set to match the value of the original game \code{vN=v[length(v)]}. A valid value is \code{vN = NULL}; in this case, the value of the balanced game for the grand coalition, \eqn{v^*(N)}, is not fixed and is instead optimized within the optimization problem.}

\item{positive_game}{Logical; if \code{TRUE}, enforces \eqn{v^*(S) \ge 0} for all coalitions.}

\item{tol}{Numeric tolerance for feasibility comparison in each iteration (default = 1e-22).}

\item{max_iter_seed}{Integer, maximum iterations before reseeding (default = 2*n).}

\item{prob_seed}{Numeric in (0,1), probability to include each coalition when reseeding (default = 0.8).}

\item{epsilon}{A small positive scalar (default \code{1e-8}) added to the diagonal of the Hessian to ensure positive definiteness and numerical stability.}
}
\value{
Numeric vector \code{x_star} of length \code{n}, the final imputation.
}
\description{
Given a cooperative game vector \code{v} and weights \code{gamma}, this function
iteratively finds a core imputation of \eqn{v^*}, and uses this imputation to deduce the value of the closest balanced game \eqn{v^*}.
}
\details{
\itemize{
\item At most \code{max_iter_seed} iterations are allowed before a random reseed of the index set.
\item On reseed, a Bernoulli trial with probability \code{prob_seed} determines which coalitions to include.
\item This helps avoid infinite loops when convergence stalls.
}
}
\examples{
v <- c(4,2,1,5,6,3,4)
closest_balanced_game_iter(v)

}
